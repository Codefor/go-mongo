package mongo

import (
	"bytes"
    "testing"
)

type encodeTest struct {
	value  interface{}
	expected []byte
}

var encodeTests = []encodeTest{
	{map[string]interface{}{}, []byte{
		0x05, 0x00, 0x00, 0x00, 0x00}},
	{map[string]interface{}{"test": "hello world"}, []byte{
		0x1B, 0x00, 0x00, 0x00, 0x02, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0C, 0x00, 0x00,
		0x00, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00,
		0x00}},
	{&struct{ test string }{"hello world"}, []byte{
		0x1B, 0x00, 0x00, 0x00, 0x02, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0C, 0x00, 0x00,
		0x00, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00,
		0x00}},
	{struct{ test string }{"hello world"}, []byte{
		0x1B, 0x00, 0x00, 0x00, 0x02, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0C, 0x00, 0x00,
		0x00, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00,
		0x00}},
	{map[string]interface{}{"mike": 100}, []byte{
		0x0F, 0x00, 0x00, 0x00, 0x10, 0x6D, 0x69, 0x6B, 0x65, 0x00, 0x64, 0x00, 0x00,
		0x00, 0x00}},
	{struct{ mike int }{100}, []byte{
		0x0F, 0x00, 0x00, 0x00, 0x10, 0x6D, 0x69, 0x6B, 0x65, 0x00, 0x64, 0x00, 0x00,
		0x00, 0x00}},
	{map[string]interface{}{"hello": 1.5}, []byte{
		0x14, 0x00, 0x00, 0x00, 0x01, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00}},
	{map[string]interface{}{"true": true}, []byte{
		0x0C, 0x00, 0x00, 0x00, 0x08, 0x74, 0x72, 0x75, 0x65, 0x00, 0x01, 0x00}},
	{map[string]interface{}{"false": false}, []byte{
		0x0D, 0x00, 0x00, 0x00, 0x08, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x00,
		0x00}},
	{map[string]interface{}{"empty": []interface{}{}}, []byte{
		0x11, 0x00, 0x00, 0x00, 0x04, 0x65, 0x6D, 0x70, 0x74, 0x79, 0x00, 0x05, 0x00,
		0x00, 0x00, 0x00, 0x00}},
	{map[string]interface{}{"empty": [...]interface{}{}}, []byte{
		0x11, 0x00, 0x00, 0x00, 0x04, 0x65, 0x6D, 0x70, 0x74, 0x79, 0x00, 0x05, 0x00,
		0x00, 0x00, 0x00, 0x00}},
	{map[string]interface{}{"none": map[string]interface{}{}}, []byte{
		0x10, 0x00, 0x00, 0x00, 0x03, 0x6E, 0x6F, 0x6E, 0x65, 0x00, 0x05, 0x00, 0x00,
		0x00, 0x00, 0x00}},
	{map[string]interface{}{"none": struct{}{}}, []byte{
		0x10, 0x00, 0x00, 0x00, 0x03, 0x6E, 0x6F, 0x6E, 0x65, 0x00, 0x05, 0x00, 0x00,
		0x00, 0x00, 0x00}},
	{map[string]interface{}{"test": []byte("test")}, []byte{
		0x14, 0x00, 0x00, 0x00, 0x05, 0x74, 0x65, 0x73, 0x74, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x00}},
	{map[string]interface{}{"test": nil}, []byte{
		0x0B, 0x00, 0x00, 0x00, 0x0A, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00}},
	{map[string]interface{}{"date": DateTime(1168216211000)}, []byte{
		0x13, 0x00, 0x00, 0x00, 0x09, 0x64, 0x61, 0x74, 0x65, 0x00, 0x38, 0xBE, 0x1C,
		0xFF, 0x0F, 0x01, 0x00, 0x00, 0x00}},
	{map[string]interface{}{"regex": Regexp{"a*b", "i"}}, []byte{
		0x12, 0x00, 0x00, 0x00, 0x0B, 0x72, 0x65, 0x67, 0x65, 0x78, 0x00, 0x61, 0x2A,
		0x62, 0x00, 0x69, 0x00, 0x00}},
	{map[string]interface{}{"$where": CodeWithScope{"test", nil}}, []byte{
		0x1F, 0x00, 0x00, 0x00, 0x0F, 0x24, 0x77, 0x68, 0x65, 0x72, 0x65, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x00, 0x00}},
	{map[string]interface{}{"oid": ObjectId{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B}}, []byte{
		0x16, 0x00, 0x00, 0x00, 0x07, 0x6F, 0x69, 0x64, 0x00, 0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x00}},
}

func TestEncode(t *testing.T) {
	for _, et := range encodeTests {
		var buf bytes.Buffer
		err := Encode(&buf, et.value)
        actual := buf.Bytes()
        if err != nil {
            t.Errorf("error parsing %s: %s", et.value, err)
        } else if !bytes.Equal(et.expected, buf.Bytes()) {
			t.Errorf("input=%s,\nexpected %q\nactual   %q", et.value, et.expected, actual)
        }
	}
}

